
with
{
	common.persistence,
	views.layouts,
	html
}

>>

namespace
{
	page: box
	{
		title: text?,
		content: ?,
		entities: array?,

		// Entry Methods

		self$(): with {open.web.html} >>
			common.runtime.web.html-response>> self$.master
			{
				title: self$.title,
				content: self$.render(self$.content)
			},

		self$.start-action(entity: e$ = text?, action: a$ = text?): with {open.web.html} >>
			common.runtime.web.html-response>> self$.master
			{
				title: self$.title,
				content:
					en$ = self$.entity-from(e$);
					an$ = en$.by-unique-name(a$);
					self$.render(an$.view)
			},

		self$.entity-from(unique-name$ = text?):
			self$.entities.items()
				<<where(i$=?)>> equals(i$.unique-name, unique-name$)
				<<first,

		// Master Page

		master: box
		{
			title: text?,
			content: ?,

			self$.to(text): text(html
			{
				head
				{
					meta {charset: "utf-8"},
					meta {name: "viewport", content: "width=device-width, initial-scale=1, shrink-to-fit=no"},
					title {self$.title},

					link {href: "/css/plain-html.css", rel: "stylesheet", type: "text/css"},
					script {src: "/js/plain-html.js", type: "text/javascript"}
				},

				body
				{
					self$.content
				}
			})
		},

		// Render Methods

		self$.render(layout$ = data-view-layout?): table
		{
			class: "dataViewLayout",

			thead
			{
				tr
				{
					[th {layout$.all-fields().label}]
				}
			},

			tbody
			{
				[
					wko$ = layout$.source();
					tr {
						[
							field$ = layout$.all-fields();
							self$.td-from-field(wko$, field$)							
						]
					}
				]
			}
		},

		rule>> self$.td-from-field(e$ = entity?, field$ = entity.field {}?):
			content$ = {e$.by-field(field$) <<if-none>> ""};
			td {text(content$)},

		rule>> self$.td-from-field(e$ = entity?, field$ = entity.action {}?):
			rq$ = common.evaluation.context.settings.request;
			td {
				a {
					href: "{rq$.path}/start-action?entity={e$.unique-name}&action={field$.computed-unique-name()}"(),
					field$.label
				}
			},

		self$.render(layout$ = sequence-layout?): div
		{
			class: if'(layout$.vertical, "sequenceLayoutVertical", "sequenceLayoutHorizontal"), 
			[div {self$.render(layout$.children.items())}]
		},

		self$.render(layout$ = text-layout?): p
		{
			layout$.content
		},

		self$.render(layout$ = form-layout?): form
		{
			class: "formLayout",

			ul {
				[
					f$ = layout$.fields.items();
					unique-name$ = f$.computed-unique-name();
					li {
						// HTML 'label' collides with field 'label'.
						open.web.html.label {
							for: unique-name$,
							f$.label
						},

						input {
							id: unique-name$,
							type: "text"
						}
					} 
				]
			}
		}
	}
}